@{ 
    ViewData["Title"] = "Тестова сторінка";
}
<div class="container">
    <h2 class="h2" id="textString">Тестова сторінка</h2>
</div>

@section Scripts {
    <script src="~/lib/axios/axios.js"></script>
    
    <script>
        'use strict';
        $(function () {
            $("#textString").on("click", function ()
            {
                //axios.post("/test/delete/2");

                //HttpRequest("/test/userdata")
                //    .then(result => {
                //        return JSON.parse(result);
                //    })
                //    .then(user => {
                //        return HttpRequest("https://api.github.com/users/Denys209818");
                //    })
                //    .then(usrDataResult => {
                //        let user = JSON.parse(usrDataResult);
                //        console.log(user.avatar_url);
                //        var $img = $(`<img src="${user.avatar_url}" width="100"/>`);

                //        $("body").append($img);

                //        setTimeout(() => {
                //            $img.remove();
                //        }, 5000);
                //    });

                //var promise = new Promise(function (resolve, reject) {
                //    resolve(true);
                //})
                //    .then(result => {
                //        return new Promise((res, rej) => {
                //            throw new Error("Message");
                //        });
                //    })
                //    .catch(error => {
                //        throw new Error("головна помилка");
                //    })
                //    .then(res => {
                //        alert("res");
                //    })
                //    .catch(error => {
                //        alert("Головна помилка: " + error.message);
                //        throw new Error("Головна помилка2");
                //    })
                //    .then(res => {
                //        alert("res2");
                //    })
                //    .catch(error => {
                //        alert("Головна помилка2: " + error.message);
                //    });

            });

            //var promise = new Promise(function (resolve, reject) {
            //   //   Асинхронний код, який виконується при створенні обєкта
            //    //  В кінці має викликатися один з методів resolve(result) або reject(error)

            //    setTimeout(function ()
            //    {
            //        reject(new Error("Hello, World!"));
            //    }, 1000);
                
            //    //  Результат буде такий, оскільки перший викликався результат
            //    //  resolve, усі решта будуть проігноровані
            //    setTimeout(function () {
            //        resolve("Успішне виконання!");
            //    }, 500);
            //    //  Викликається метод reject автоматично
            //    //throw new Error("Помилка промісів!");
            //});

            //promise.then(
            //    resolve => alert("Fulfilled: " + resolve),
            //    reject => alert("Rejected: " + reject.message)
            //); 

            ////  Навішування обробників на подію коли викликався resolve()
            //promise.then(function (result)
            //{
            //    console.log(result);
            //});
            ////  Навішування обробників на подію коли викликався reject()
            //promise.then(null, function (error)
            //{
            //    console.log(error.message);
            //});
            ////аналогічно цьому запису
            //promise.catch(function (error) {
            //    console.log(error.message);
            //});

            ////Також можна вказати обидва обробники зразу
            //promise.then(null, null);

            function HttpRequest(url)
            {
                return new Promise((resolve, reject) => {
                    var xhr = new XMLHttpRequest();
                    xhr.open('GET', url, true);

                    xhr.onload = function ()
                    {
                        if (this.status == 200) {
                            resolve(this.response);
                        } else
                        {
                            var error = new Error(this.statusText);
                            error.status = this.status;
                            reject(error);
                        }
                    }

                    xhr.onerror = function ()
                    {
                        throw new Error("Помилка мережі!");
                    }

                    xhr.send();
                });
            }

        });
    </script>
}